// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/felipevillarrealdaza/go-service-template/internal/repository"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: ctx, arg
func (_m *Querier) AddOrder(ctx context.Context, arg repository.AddOrderParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.AddOrderParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOrderPack provides a mock function with given fields: ctx, arg
func (_m *Querier) AddOrderPack(ctx context.Context, arg repository.AddOrderPackParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderPack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.AddOrderPackParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPack provides a mock function with given fields: ctx, packSize
func (_m *Querier) AddPack(ctx context.Context, packSize int32) error {
	ret := _m.Called(ctx, packSize)

	if len(ret) == 0 {
		panic("no return value specified for AddPack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, packSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePackBySize provides a mock function with given fields: ctx, packSize
func (_m *Querier) RemovePackBySize(ctx context.Context, packSize int32) error {
	ret := _m.Called(ctx, packSize)

	if len(ret) == 0 {
		panic("no return value specified for RemovePackBySize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, packSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveOrderById provides a mock function with given fields: ctx, orderID
func (_m *Querier) RetrieveOrderById(ctx context.Context, orderID uuid.UUID) (repository.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveOrderById")
	}

	var r0 repository.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (repository.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) repository.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(repository.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveOrderPacksByOrder provides a mock function with given fields: ctx, orderID
func (_m *Querier) RetrieveOrderPacksByOrder(ctx context.Context, orderID uuid.UUID) ([]repository.RetrieveOrderPacksByOrderRow, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveOrderPacksByOrder")
	}

	var r0 []repository.RetrieveOrderPacksByOrderRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]repository.RetrieveOrderPacksByOrderRow, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []repository.RetrieveOrderPacksByOrderRow); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.RetrieveOrderPacksByOrderRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveOrders provides a mock function with given fields: ctx
func (_m *Querier) RetrieveOrders(ctx context.Context) ([]repository.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveOrders")
	}

	var r0 []repository.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrievePacks provides a mock function with given fields: ctx
func (_m *Querier) RetrievePacks(ctx context.Context) ([]int32, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrievePacks")
	}

	var r0 []int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]int32, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []int32); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
