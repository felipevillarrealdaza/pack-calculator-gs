// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PackMediator is an autogenerated mock type for the PackMediator type
type PackMediator struct {
	mock.Mock
}

// AddPack provides a mock function with given fields: ctx, size
func (_m *PackMediator) AddPack(ctx context.Context, size int) error {
	ret := _m.Called(ctx, size)

	if len(ret) == 0 {
		panic("no return value specified for AddPack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, size)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePack provides a mock function with given fields: ctx, size
func (_m *PackMediator) RemovePack(ctx context.Context, size int) error {
	ret := _m.Called(ctx, size)

	if len(ret) == 0 {
		panic("no return value specified for RemovePack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, size)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPackMediator creates a new instance of PackMediator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackMediator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackMediator {
	mock := &PackMediator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
